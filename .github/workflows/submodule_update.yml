name: Weekly Submodule Update
on:
  schedule:
    # Runs at 9:00 AM UTC every Monday
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allows manual triggering
jobs:
  update-submodules:
    runs-on: ubuntu-latest
    outputs:
      update_branch: ${{ steps.update-submodules.outputs.update_branch }}
      updates_made: ${{ steps.update-submodules.outputs.updates_made }}
      update_report: ${{ steps.update-submodules.outputs.update_report }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # Fetch all history for all tags and branches
          fetch-depth: 0
          # Fetch submodules
          submodules: 'recursive'
      - name: Set up Git user
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
      - name: Create branch for updates
        run: |
          # Create a new branch for the updates
          UPDATE_BRANCH="submodule-updates-$(date +%Y-%m-%d)"
          git checkout -b $UPDATE_BRANCH
          echo "UPDATE_BRANCH=$UPDATE_BRANCH" >> $GITHUB_ENV
      - name: Update submodules to latest releases
        id: update-submodules
        run: |
          # Initialize and update all submodules
          git submodule update --init --recursive

          # Store whether any updates were made
          UPDATES_MADE=false

          # Create a detailed update report
          UPDATE_REPORT="# Submodule Updates $(date +%Y-%m-%d)\n\n"

          # For each submodule
          git submodule foreach '
            echo "Checking $name for updates..."

            # Save current commit and its description
            CURRENT_COMMIT=$(git rev-parse HEAD)
            CURRENT_DESC=$(git show -s --format="%h - %s" $CURRENT_COMMIT)
            UPDATE_REPORT="$UPDATE_REPORT## $name\nCurrent version: $CURRENT_DESC\n"

            # Checkout the default branch
            git checkout $(git symbolic-ref refs/remotes/origin/HEAD | sed "s@^refs/remotes/origin/@@" || echo "master")

            # Fetch latest changes including tags
            git fetch --tags

            # Find the latest tag
            LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null)

            if [ -n "$LATEST_TAG" ]; then
              echo "Latest release tag: $LATEST_TAG"

              # Checkout the latest tag
              git checkout $LATEST_TAG
              NEW_COMMIT=$(git rev-parse HEAD)
              NEW_DESC=$(git show -s --format="%h - %s" $NEW_COMMIT)

              # If the current commit is different from the latest tag
              if [ "$CURRENT_COMMIT" != "$NEW_COMMIT" ]; then
                echo "Updating $name to $LATEST_TAG"
                UPDATE_REPORT="$UPDATE_REPORT Updated to: $NEW_DESC (tag: $LATEST_TAG)\n"
                cd $toplevel
                git add $name
                UPDATES_MADE=true
              else
                echo "$name is already at the latest release"
                UPDATE_REPORT="$UPDATE_REPORT Already at latest release\n"
              fi
            else
              echo "No tags found for $name, pulling latest changes"
            fi
            UPDATE_REPORT="$UPDATE_REPORT\n"
          '

          # Commit changes if updates were made
          if [ "$UPDATES_MADE" = true ]; then
            git commit -m "Weekly submodule update - $(date +%Y-%m-%d)"
            echo "Submodule updates committed to branch"

            # Push the branch to remote
            git push --set-upstream origin $UPDATE_BRANCH
          else
            echo "All submodules are already up to date."
          fi

          # Set outputs for next jobs
          echo "update_branch=$UPDATE_BRANCH" >> $GITHUB_OUTPUT
          echo "updates_made=$UPDATES_MADE" >> $GITHUB_OUTPUT

          # Escape the update report for GitHub Actions output
          UPDATE_REPORT="${UPDATE_REPORT//'%'/'%25'}"
          UPDATE_REPORT="${UPDATE_REPORT//$'\n'/'%0A'}"
          UPDATE_REPORT="${UPDATE_REPORT//$'\r'/'%0D'}"
          echo "update_report=$UPDATE_REPORT" >> $GITHUB_OUTPUT
  create-pull-request:
    needs: [update-submodules]
    if: needs.update-submodules.outputs.updates_made == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get the update report from the previous job
            const updateReport = `${{ needs.update-submodules.outputs.update_report }}`;

            try {
              const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Weekly Submodule Updates - ' + new Date().toISOString().split('T')[0],
                head: '${{ needs.update-submodules.outputs.update_branch }}',
                base: 'master',
                body: updateReport,
                maintainer_can_modify: true
              });

              console.log(`Pull Request created: ${pr.data.html_url}`);

              // Add labels to the PR
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.data.number,
                labels: ['dependencies', 'automated-pr']
              });
            } catch (error) {
              core.setFailed(`Failed to create pull request: ${error.message}`);
            }
  create-issue-on-failure:
    needs: [update-submodules]
    if: failure() && needs.update-submodules.outputs.updates_made == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Create issue if process fails
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Weekly submodule update failed',
              body: 'The automated weekly submodule update workflow failed. Either the submodule updates could not be applied or the build verification failed. Please check the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.'
            })
